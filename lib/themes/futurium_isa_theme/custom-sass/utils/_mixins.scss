// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------


/* adds a border dashed top & bottom & adds padding */

@mixin border-double{
  @include rem(border-top, 1px dashed $mid-grey);
  @include rem(border-bottom, 1px dashed $mid-grey);
  @include rem(padding, 10px 0 10px 0);
  @include rem(margin, 20px 0 20px 0);
}


/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Responsive manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);
  
  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

/// Flexbox
/// Used for eq height of boxes.

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}


/// Responsive breakpoints

@mixin respond-to($breakpoint) {
  @if $breakpoint == "small" {
    @media (max-width: 768px) {
      @content;
    }
  }

  @else if $breakpoint == "medium" {
    @media (min-width: 768px) and (max-width: 1024px) {
      @content;
    }
  }

  @else if $breakpoint == "large" {
    @media (min-width: 1200px) {
      @content;
    }
  }
}

/// Font-size in pixels & rem
/// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

/// Vertically Centered

@mixin vertically-centered
{
    display: flex;
    align-items: center;
    justify-content: center;
}

/// No padding for lists

.nopadding-list
{
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin btn-default {
  @include rem(padding, 7px 10px 7px 10px);
  border-radius: 0px;
  @include rem(font-size, 14px);
}




@mixin social-button($type) {
  background-image: url(../assets/img/#{$type});
  background-repeat: no-repeat;
  padding-left: 30px;
  background-position: 10px center;
}

/* mixin for layout content types */

@mixin contenttype($color) {
  /* general elements */
  a {
    color: $color;
    @include on-event{
      color: $color;
    }
  }

  h2.pane-title {
    color: $color;
    border-bottom: none;
    @include rem(margin, 0 0 20px 0);
    @extend h3;
  }

  h3 a {
    color: darken($text-color, 2%);
    @include on-event {
      color: $color;
    }
  }

  .btn-default {
    @include btn-default;
  }

  .btn-primary, .flag-action, .unflag-action {
    @include btn-default;
    background: $color;
    border-color: $color;
    color: #fff;
    border: none;
    @include on-event {
      background-color: darken($color, 10%);
      color: #fff;
    }
  }


  /* links to edit / manage display / ... */
  .container-top {
    background-color: darken($color, 20%);
    /* temp fix? should header1 be removed from page.tpl.php */
    h1.page-header {
      display: none;
    }
    a {
      color: #fff;
      @include on-event{
        color: #fff;
      }
    }

  }
  /* row1 theming */
  .container-fullwidth.row1 {
    color: #fff;
    background: $color;
    border-top: 3px solid darken($color, 15%);
    border-bottom: 1px solid darken($color, 15%);
    a {
      color: #fff;
      @include on-event {
        color: #fff;
      }
    }
    p {
      @include rem(font-size, 18px);
      @include rem(line-height, 24px);
    }
  }

  
  .share-links {
    a {
      padding: 10px;
      background-color: darken($color, 10%);
      @include on-event {
        background-color: darken($color, 15%);
        color: #fff;
      }
    } 
  }
  

}





