<?xml version="1.0"?>
<!-- PHP_CodeSniffer standard for NextEuropa subsites. -->
<!-- See http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php -->
<ruleset name="NextEuropa">
    <description>Drupal coding standard for NextEuropa subsites</description>

    <rule ref="./vendor/drupal/coder/coder_sniffer/Drupal" />

    <!-- Minified files don't have to comply with coding standards. -->
    <exclude-pattern>*.min.css</exclude-pattern>
    <exclude-pattern>*.min.js</exclude-pattern>

    <!-- Exclude files that do not contain PHP, Javascript or CSS code. -->
    <exclude-pattern>*.json</exclude-pattern>
    <exclude-pattern>*.sh</exclude-pattern>
    <exclude-pattern>*.xml</exclude-pattern>
    <exclude-pattern>*.yml</exclude-pattern>
    <exclude-pattern>composer.lock</exclude-pattern>
    <exclude-pattern>*.png</exclude-pattern>
    <exclude-pattern>*.gif</exclude-pattern>
    <exclude-pattern>*.ico</exclude-pattern>

    <!-- Exclude third party code. -->
    <exclude-pattern>resources/cloudformation</exclude-pattern>
    <exclude-pattern>resources/codedeploy</exclude-pattern>
    <exclude-pattern>vendor/*</exclude-pattern>
    <exclude-pattern>lib/themes/bootstrap/*</exclude-pattern>

    <!-- Exclude build properties files. -->
    <exclude-pattern>build.properties*</exclude-pattern>

    <!-- Exclude .make files. -->
    <exclude-pattern>resources/*.make</exclude-pattern>

    <!-- Views handlers not strictly follow Drupal class name conventions. -->
    <rule ref="Drupal.NamingConventions.ValidClassName">
        <exclude-pattern>modules/**/views/*.inc</exclude-pattern>
    </rule>

    <!-- Views handlers not strictly follow Drupal function name conventions. -->
    <rule ref="Drupal.NamingConventions.ValidFunctionName">
        <exclude-pattern>modules/**/views/*.inc</exclude-pattern>
    </rule>

    <!-- Phing tasks require to use CamelCaps for argument names. -->
    <rule ref="Drupal.NamingConventions.ValidVariableName">
        <exclude-pattern>src/Phing</exclude-pattern>
    </rule>

    <!-- CSS Style definitions requires a semicolon but not in @media rule. -->
    <rule ref="Squiz.CSS.SemicolonSpacing.NotAtEnd">
        <exclude-pattern>lib/*/*.css</exclude-pattern>
    </rule>

    <!-- Allow extension of the context condition. -->
    <rule ref="Drupal.NamingConventions.ValidFunctionName.ScopeNotCamelCaps">
        <exclude-pattern>lib/features/*/*.inc</exclude-pattern>
    </rule>

    <!-- Exported field instances have too long comments. -->
    <rule ref="Drupal.Files.LineLength.TooLong">
        <exclude-pattern>lib/features/*/*.features.field_instance.inc</exclude-pattern>
    </rule>

    <!-- File appears to be minified and cannot be processed. -->
    <rule ref="Internal.Tokenizer.Exception">
        <exclude-pattern>lib/themes/*/*.css</exclude-pattern>
    </rule>

    <!-- Line exceeds 80 characters in FeatureContext and this is not relevant. -->
    <rule ref="Drupal.Files.LineLength.TooLong">
        <exclude-pattern>tests/features/bootstrap/FeatureContext.php</exclude-pattern>
    </rule>

    <!-- Parameter comment must end with a full stop in FeatureContext and this is not relevant. -->
    <rule ref="Drupal.Commenting.FunctionComment.ParamCommentFullStop">
        <exclude-pattern>tests/features/bootstrap/FeatureContext.php</exclude-pattern>
    </rule>

    <!-- No PHP code was found in feature files. -->
    <rule ref="Internal.NoCodeFound">
        <exclude-pattern>tests/features/**/*.feature</exclude-pattern>
    </rule>

    <!-- Line exceeds 80 characters in the README file. Allowing this for code line examples -->
    <rule ref="Drupal.Files.TxtFileLineLength.TooLong">
        <exclude-pattern>README.md</exclude-pattern>
    </rule>

</ruleset>
